动态规划（数组上的动归比较多）
1. 要点：
    1.0 动归可以从原始的BFS/回溯递归暴力法过渡来.可以从简单情况出发推推前几种情况。
    1.1 最优子结构，即dp数组的含义非常重要，后一个结构和之前的哪些状态有关
    1.2 状态转移方程：基于前一个或者前几个状态进行计算（加减法，max/min，...）
    此时注意题目给的约束
    1.3 dp数组的初始化， 状态的边界条件
    1.4 top-down or bottom-up
2. 例题：
2.1 上楼梯： dp[i] 表示走到第i级台阶的最优解（最小次数）由于只能从上一阶或者上两阶转移来，所以
    dp[i]= min(dp[i-1],dp[i-2])+1. 无边界条件
2.2  house-robber: dp[i]表示到第i个房子的最优解。如果不选择它，则状态从dp[i-1]转移过来；如选择它，则状态从dp[i-2]转移
    过来。dp[i]=min(dp[i-1], dp[i-2]+house[i])
2.3 maximum-subarray: 将求n个数的最大子段和变成以第一个，第二个，...第n个数结尾的子段和。
    dp[i]的含义不是前i个连续数的最优解，因为这样状态间不连续，找不到转移方程。dp[i]而是以第i个数结尾的最优解。
    dp[i] = max(dp[i-1]+nums[i], nums[i])
2.4  coin-change: dp[i]表示金额为i的最优解。（首先把一个固定的整数金额变成连续的整数数组方便做动归）。loop j through coins:
 若i-coins[j]>0,表示可以从dp[i-coins[j]]转移过来。dp[i]=min(dp[i-coins[1]], dp[i-coins[2]],...)
 .但是注意，由于是在循环里做判断,所以判断条件除了i-coins[j]>0还有dp[i]>dp[i-coins[j]],相当于打擂台。
初始化注意。
2.5 Triangle: bottom-up的典型代表，自底向上是因为减少了讨论的情况。dp[][]代表第(i,j)个元素的最优解。
 最后一层的dp就是本身值。loop i from n-2 to 0, loop j from 0 to len(tri[i]):
dp[i][j] = min(dp[i-1][j],dp[i-1][j+1])+tri[i][j]。注意并不需要额外开辟dp数组，直接在tri上就地修改即可。
2.6 Longest-Increasing-subarray: 同理dp[i]表示以第i个元素结尾的字串中最大上升串的长度。loop i from 1 to n-1:
loop j from 0 to i: dp[i]=dp[j]+1 if nums[i]>nums[j] and dp[i]<dp[j]+1
注意用栈的解法。

2.7 BFS可解但是超时。类比三角形不过要考虑边界条件：单独考虑第一行和第一列的状态转移，之后考虑中间部分。
